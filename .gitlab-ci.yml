image: "node:20.2.0"


.default_rules:
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(dev|main)$/ || $CI_COMMIT_BRANCH =~ /^(dev|main)$/'


default:
  interruptible: true


stages:
  - essential
  - lint
  - test
  - build
  - deploy


cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/


check_conflict:
  before_script:
    - ''
  stage: essential
  script:
    - (! grep --exclude-dir={node_modules,env,venv} --max-count=1 -lr -E '^<<<<<<< |^=======$|^>>>>>>> ' .)
  rules:
    - !reference [ .default_rules, rules ]


validate_dependencies:
  before_script:
    - ''
  stage: essential
  rules:
    - !reference [ .default_rules, rules ]
  script:
    - npx dependencies-checker@latest


lint:
  stage: lint
  before_script:
    - ''
  script:
    - npm i
    - npm run lint
  rules:
    - !reference [ .default_rules, rules ]


check_missing_changes:
  stage: lint
  script:
    - npm i
    - git diff
    - git status
    - if [ -n "$(git status --porcelain)" ]; then return 1; fi
  rules:
    - !reference [ .default_rules, rules ]


# test:
#   stage: test
#   rules:
#     - !reference [ .default_rules, rules ]
#   script:
#     - npm i
#     - npm run test


build-assets:
  stage: build
  artifacts:
    paths:
      - out/
  script:
    - npm i
    - npm run build
  rules:
    - !reference [ .default_rules, rules ]


sonarqube-check:
  before_script:
    - ''
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [ "" ]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  allow_failure: true
  rules:
    - !reference [ .default_rules, rules ]


deploy_prod:
  environment:
    name: prod
  stage: deploy
  script:
    - rm -rf ./.cache
    - rm -rf ./out
    - npm i
    - npm run build
    - apt update
    - apt install pipx -y
    - pipx install awscli
    - pipx ensurepath
    - source ~/.bashrc
    - aws s3 cp out/ s3://production-beelieve-website/ --recursive --exclude "*" --include "*"
    - aws cloudfront create-invalidation --distribution-id EKISZ9I0HSONS --paths "/*"
  only:
    - dev


# deploy_prod:
#   environment:
#     name: prod
#   stage: deploy
#   script:
#     - rm -rf ./.cache
#     - rm -rf ./out
#     - npm run build
#     - apk update
#     - apk add --no-cache python3-dev py3-pip
#     - pip install awscli
#     - aws s3 cp out/ s3://production-beelieve-website/ --recursive --exclude "*" --include "*"
#     - aws cloudfront create-invalidation --distribution-id EKISZ9I0HSONS --paths "/*"
#   only:
#     - master
